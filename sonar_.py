# -*- coding: utf-8 -*-
"""Sonar .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j4K28CAeroycM7pBW6abeArykrAvvuDy

SONAR IS A SUBMARINE , IT IS WORKING IN THE OCEAN BORDER WHEN IT MOVING IT DETECTS LOT OF STONES AND ETC . THE MAIN AIM OF THIS SONAR PROJECT IS TO FIND WHETHER THE OBJECT IS ROCK OR BOMB
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""importing the dataset of sonar"""

sonar_data=pd.read_csv('/content/Copy of sonar data.csv',header=None)

"""reading the first five records"""

sonar_data.head()

"""here R--> Rock
and  M --> Mock

checking whether is any noises is presents
"""

sonar_data.isnull().sum()

sonar_data.describe()

"""divide the training data

There is no null values is present
and all values are standardize
"""

x=sonar_data.drop(60,axis=1)
y=sonar_data[60]

print(x)
print(y)

"""now divide the training data"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,random_state=2)

print(x_train)
print(y_train)

"""now train the model with logisticregression"""

model=LogisticRegression()

model.fit(x_train,y_train)

"""model is succesffuly trained now check the prediction

"""

x_train_predict=model.predict(x_train)

"""now predict the accuracy"""

x_train_accuracy=accuracy_score(x_train_predict,y_train)

x_train_accuracy

x_test_predict=model.predict(x_test)

x_test_predict

x_test_accuracy=accuracy_score(x_test_predict,y_test)

x_test_accuracy

"""predicting the new data 1st prediction"""

input_data=(0.0317,0.0956,0.1321,0.1408,0.1674,0.1710,0.0731,0.1401,0.2083,0.3513,0.1786,0.0658,0.0513,0.3752,0.5419,0.5440,0.5150,0.4262,0.2024,0.4233,0.7723,0.9735,0.9390,0.5559,0.5268,0.6826,0.5713,0.5429,0.2177,0.2149,0.5811,0.6323,0.2965,0.1873,0.2969,0.5163,0.6153,0.4283,0.5479,0.6133,0.5017,0.2377,0.1957,0.1749,0.1304,0.0597,0.1124,0.1047,0.0507,0.0159,0.0195,0.0201,0.0248,0.0131,0.0070,0.0138,0.0092,0.0143,0.0036,0.0103)

input_data_as_numpy_array=np.asarray(input_data)
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
input_data_reshaped

prediction=model.predict(input_data_reshaped)

if(prediction[0]=='R'):
  print("the object is Rock")
else:
  print("the object is Mock")

"""now again predicting new input data

"""

input_data=(0.0091,0.0213,0.0206,0.0505,0.0657,0.0795,0.0970,0.0872,0.0743,0.0837,0.1579,0.0898,0.0309,0.1856,0.2969,0.2032,0.1264,0.1655,0.1661,0.2091,0.2310,0.4460,0.6634,0.6933,0.7663,0.8206,0.7049,0.7560,0.7466,0.6387,0.4846,0.3328,0.5356,0.8741,0.8573,0.6718,0.3446,0.3150,0.2702,0.2598,0.2742,0.3594,0.4382,0.2460,0.0758,0.0187,0.0797,0.0748,0.0367,0.0155,0.0300,0.0112,0.0112,0.0102,0.0026,0.0097,0.0098,0.0043,0.0071,0.0108)

input_data_as_np_array=np.asarray(input_data)
input_data_reshaped=input_data_as_np_array.reshape(1,-1)
input_data_reshaped

prediction=model.predict(input_data_reshaped)

if(prediction[0]=='R'):
  print("the object is Rock")
else:
  print("the object is Mock")